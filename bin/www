#!/usr/bin/env node

/**
 * Module dependencies.
 */
var config = require('../config');

var app = require('../app');
//var debug = require('debug')('edu2site:server');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || config.httpPort || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var http;
var server;
var protocol = '';
if (config.ssl) {
  var fs = require('fs');
  var options = {
    key: fs.readFileSync(config.sslKey, 'utf8'),
    cert: fs.readFileSync(config.sslCert, 'utf8')
  };
  http = require('https');
  server = http.createServer(options, app);
  protocol = 'HTTPSecure';
} else {
  http = require('http');
  server = http.createServer(app);
  protocol = 'HTTP';
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? ' pipe ' + addr
    : ' port ' + addr.port;
//  debug('Listening on ' + bind);
  console.log('Started in ' + app.get('env') + ' mode.\nListening ' + protocol + bind);
}
